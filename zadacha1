#Известная утилита word2vec, основанная на нейронной сети, умеет приписывать каждому слову из словаря некоторый числовой вектор размерности N. При этом оказывается, что семантически «близким» словам соответствуют «близкие» векторы. Эта утилита находит широкое применение в задачах обработки естественного языка и машинного обучения.
#В качестве меры «близости» между словами обычно выбирают угол между их векторами, косинус которого вычисляют по известной формуле
#Однако часто векторы слов нормируют (чтобы их длина стала равна константе), и тогда в качестве меры близости рассматривают просто скалярное произведение
#Чем это скалярное произведение больше, тем семантически «ближе» слова друг к другу.
#Вам дан словарь из M слов, каждому из которых сопоставлен N-мерный вектор. Гарантируется, что все слова различны. Требуется найти в этом списке ближайшие слова к первому слову (кроме самого этого первого слова), используя в качестве метрики близости просто скалярное произведение.
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>

void appendString(std::vector<std::string>& n, std::vector<std::vector<int>>& m, std::string str) {
    std::stringstream ss(str);
    std::string token;
    ss >> token;
    n.push_back(token);

    std::vector<int> tmp;
    while (ss >> token) {
        int num = std::stoi(token);
        tmp.push_back(num);
    }
    m.push_back(tmp);

}

int multiply(std::vector<std::vector<int>>& m, size_t ind) {
    int res = 0;
    for (size_t i = 0; i < m[0].size(); ++i) {
        res += (m[0][i]) * (m[ind][i]);
    }
    return  res;;
}

int main()
{
    int M, N;

    M = 4;
    N = 3;

    std::cin >> M;
    std::cin >> N;
    std::cin.ignore();

    std::vector<std::string> names;
    std::vector<std::vector<int>> matrix;
    std::string str;

    for (int i = 0; i < M; ++i) {
        std::getline(std::cin, str);
        appendString(names, matrix, str);
    }

    /*
    appendString(names, matrix, "sweden 4 6 3");
    appendString(names, matrix, "queen 0 2 2");
    appendString(names, matrix, "norway 4 7 5");
    appendString(names, matrix, "king -1 3 2");
    */

    std::vector<int> mult;
    for (int i = 1; i < M; ++i) {
        mult.push_back(multiply(matrix, i));
    }

    int max = *std::max_element(mult.begin(), mult.end());
    for (int i = 0; i < M -1; ++i) {
        if (max == mult[i]) {
            std::cout << names[i+1] << "\n";
        }
    }
    return 0;
}
